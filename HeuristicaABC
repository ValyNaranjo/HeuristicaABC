import random

class Abeja:
def init(self, posicion):
self.posicion = posicion
self.intentos = 0

class OchoReinasABC:
def init(self, num_abejas_empleadas, num_abejas_observadoras, max_intentos):
self.tam_tablero = 8
self.num_abejas_empleadas = num_abejas_empleadas
self.num_abejas_observadoras = num_abejas_observadoras
self.max_intentos = max_intentos

def es_valido(self, tablero, fila, columna):
    for i in range(fila):
        if tablero[i] == columna or \
           tablero[i] - i == columna - fila or \
           tablero[i] + i == columna + fila:
            return False
    return True

def calcular_conflictos(self, tablero):
    conflictos = 0
    for i in range(self.tam_tablero):
        for j in range(i + 1, self.tam_tablero):
            if tablero[i] == tablero[j] or \
               tablero[i] - i == tablero[j] - j or \
               tablero[i] + i == tablero[j] + j:
                conflictos += 1
    return conflictos

def generar_abeja(self):
    return Abeja([random.randint(0, self.tam_tablero - 1) for _ in range(self.tam_tablero)])

def inicializar_poblacion(self):
    return [self.generar_abeja() for _ in range(self.num_abejas_empleadas)]

def fase_abejas_empleadas(self, poblacion):
    for abeja in poblacion:
        indice = random.randint(0, self.tam_tablero - 1)
        nueva_posicion = abeja.posicion.copy()
        while nueva_posicion[indice] == abeja.posicion[indice]:
            nueva_posicion[indice] = random.randint(0, self.tam_tablero - 1)
        if self.calcular_conflictos(nueva_posicion) < self.calcular_conflictos(abeja.posicion):
            abeja.posicion = nueva_posicion.copy()
            abeja.intentos = 0
        else:
            abeja.intentos += 1

def fase_abejas_observadoras(self, poblacion):
    valores_aptitud = [1 / (self.calcular_conflictos(abeja.posicion) + 1) for abeja in poblacion]
    suma_aptitud = sum(valores_aptitud)
    probabilidades = [aptitud / suma_aptitud for aptitud in valores_aptitud]

    for _ in range(self.num_abejas_observadoras):
        abeja_seleccionada = random.choices(poblacion, probabilidades)[0]
        indice = random.randint(0, self.tam_tablero - 1)
        nueva_posicion = abeja_seleccionada.posicion.copy()
        while nueva_posicion[indice] == abeja_seleccionada.posicion[indice]:
            nueva_posicion[indice] = random.randint(0, self.tam_tablero - 1)
        if self.calcular_conflictos(nueva_posicion) < self.calcular_conflictos(abeja_seleccionada.posicion):
            abeja_seleccionada.posicion = nueva_posicion.copy()
            abeja_seleccionada.intentos = 0
        else:
            abeja_seleccionada.intentos += 1

def evaluar_solucion(self, solucion):
    conflictos = self.calcular_conflictos(solucion)
    return 1 / (conflictos + 1)  # Heurística: mayor aptitud para soluciones con menos conflictos

def encontrar_solucion(self):
    poblacion = self.inicializar_poblacion()
    mejor_solucion = None
    mejor_aptitud = 0
    iteraciones_sin_mejora = 0

    while iteraciones_sin_mejora < self.max_intentos:
        self.fase_abejas_empleadas(poblacion)
        self.fase_abejas_observadoras(poblacion)

        for abeja in poblacion:
            aptitud = self.evaluar_solucion(abeja.posicion)
            if aptitud > mejor_aptitud:
                mejor_solucion = abeja.posicion.copy()
                mejor_aptitud = aptitud
                iteraciones_sin_mejora = 0
            else:
                iteraciones_sin_mejora += 1

        if mejor_aptitud == 1:
            return mejor_solucion

    return None

# Ejemplo de uso
ocho_reinas_abc = OchoReinasABC(num_abejas_empleadas=50, num_abejas_observadoras=50, max_intentos=1000)
solucion = ocho_reinas_abc.encontrar_solucion()

if solucion is not None:
print("Solución encontrada:")
for i in range(ocho_reinas_abc.tam_tablero):
fila = ['R' if j == solucion[i] else '-' for j in range(ocho_reinas_abc.tam_tablero)]
print(' '.join(fila))
else:
print("No se encontró una solución válida.")
  
