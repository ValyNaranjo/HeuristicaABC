import random

class Bee:
    def __init__(self, position):
        self.position = position
        self.trials = 0

class EightQueensABC:
    def __init__(self, num_employed_bees, num_onlooker_bees, max_trials):
        self.board_size = 8
        self.num_employed_bees = num_employed_bees
        self.num_onlooker_bees = num_onlooker_bees
        self.max_trials = max_trials

    def is_valid(self, board, row, col):
        for i in range(row):
            if board[i] == col or \
               board[i] - i == col - row or \
               board[i] + i == col + row:
                return False
        return True

    def calculate_conflicts(self, board):
        conflicts = 0
        for i in range(self.board_size):
            for j in range(i + 1, self.board_size):
                if board[i] == board[j] or \
                   board[i] - i == board[j] - j or \
                   board[i] + i == board[j] + j:
                    conflicts += 1
        return conflicts

    def generate_bee(self):
        return Bee([random.randint(0, self.board_size - 1) for _ in range(self.board_size)])

    def initialize_population(self):
        return [self.generate_bee() for _ in range(self.num_employed_bees)]

    def employed_bee_phase(self, population):
        for bee in population:
            index = random.randint(0, self.board_size - 1)
            new_position = bee.position.copy()
            while new_position[index] == bee.position[index]:
                new_position[index] = random.randint(0, self.board_size - 1)
            if self.calculate_conflicts(new_position) < self.calculate_conflicts(bee.position):
                bee.position = new_position.copy()
                bee.trials = 0
            else:
                bee.trials += 1

    def onlooker_bee_phase(self, population):
        fitness_values = [1 / (self.calculate_conflicts(bee.position) + 1) for bee in population]
        total_fitness = sum(fitness_values)
        probabilities = [fitness / total_fitness for fitness in fitness_values]

        for _ in range(self.num_onlooker_bees):
            selected_bee = random.choices(population, probabilities)[0]
            index = random.randint(0, self.board_size - 1)
            new_position = selected_bee.position.copy()
            while new_position[index] == selected_bee.position[index]:
                new_position[index] = random.randint(0, self.board_size - 1)
            if self.calculate_conflicts(new_position) < self.calculate_conflicts(selected_bee.position):
                selected_bee.position = new_position.copy()
                selected_bee.trials = 0
            else:
                selected_bee.trials += 1

    def evaluate_solution(self, solution):
        conflicts = self.calculate_conflicts(solution)
        return 1 / (conflicts + 1)  # Heurística: mayor aptitud para soluciones con menos conflictos

    def find_solution(self):
        population = self.initialize_population()
        best_solution = None
        best_fitness = 0
        iterations_without_improvement = 0

        while iterations_without_improvement < self.max_trials:
            self.employed_bee_phase(population)
            self.onlooker_bee_phase(population)

            for bee in population:
                fitness = self.evaluate_solution(bee.position)
                if fitness > best_fitness:
                    best_solution = bee.position.copy()
                    best_fitness = fitness
                    iterations_without_improvement = 0
                else:
                    iterations_without_improvement += 1

            if best_fitness == 1:
                return best_solution

        return None

# Ejemplo de uso
eight_queens_abc = EightQueensABC(num_employed_bees=50, num_onlooker_bees=50, max_trials=1000)
solution = eight_queens_abc.find_solution()

if solution is not None:
    print("Solución encontrada:")
    for i in range(eight_queens_abc.board_size):
        row = ['R' if j == solution[i] else '-' for j in range(eight_queens_abc.board_size)]
        print(' '.join(row))
else:
    print("No se encontró una solución válida.")
    
